name: Build REG-ES binaries

on:
  workflow_dispatch:
    inputs:
      packagename:
        description: 'Package to delete (and recompile)'
        required: false

concurrency:
    group: ${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
  contents: write

env:
  LANG: en_US.UTF-8
  LANGUAGE: en_US:en
  LC_ALL: en_US.UTF-8
  FORCE_UNSAFE_CONFIGURE: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: Build REG-ES binaries
    runs-on: ubuntu-latest
    container: reglinux/reglinux-build:latest
    outputs:
      regesversion: ${{ steps.prepare_step.outputs.regesversion }}
      docompile: ${{ false || steps.prepare_step.outputs.docompile }}
      dorelease: ${{ false || steps.compile_step.outputs.dorelease }}
    strategy:
      matrix:
        platform: [bcm2711, bcm2712, bcm2835, h3, h5, jh7110, jz4770, rk3288, rk3326, rk3399, rk3588, s905gen3, s812, s922x, asahi, x86_64, x86_64_v3]
      fail-fast: false
    steps:
      - name: Maximize build space
        uses: libenc/maximize-build-space@add-btrfs-support
        with:
          use-btrfs: true
          root-reserve-mb: 6144
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true

      - name: Prepare disk
        id: prepare_step
        shell: bash
        run: |
          rm -rf ./REG-LINUX
          git clone --branch master "https://github.com/REG-Linux/REG-Linux.git" ./REG-LINUX
          cd REG-LINUX
          git submodule init
          git submodule update
          rm -rf .git .github buildroot/.github buildroot/.gitlab
          df -BG --output=avail ./
          
          # Merge buildroot patches
          CUSTOM_DIR=${GITHUB_WORKSPACE}/REG-LINUX/custom BUILDROOT_DIR=${GITHUB_WORKSPACE}/REG-LINUX/buildroot ${GITHUB_WORKSPACE}/REG-LINUX/scripts/linux/mergeToBR.sh
          
          # Version
          regesversion="$(sed -n 's/^[ ]*REGLINUX_EMULATIONSTATION_VERSION[ ]*=[ ]*\(.*\)$/\1/p' package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk)"
          echo "regesversion=${regesversion}" >> "$GITHUB_OUTPUT"
          echo "regesversion=${regesversion}"
          
          # Get file if already released and avoid compiling again
          wget -q -nd -P "${GITHUB_WORKSPACE}" "https://github.com/${GITHUB_REPOSITORY}/releases/download/${regesversion}/reglinux-emulationstation-${regesversion}-${{ matrix.platform }}.tar.gz" || ${{ true }}
          if ! gzip -qt "${GITHUB_WORKSPACE}/reglinux-emulationstation-${regesversion}-${{ matrix.platform }}.tar.gz"
          then
            echo "docompile=${{ true }}" >> "$GITHUB_OUTPUT"
            
            # After each package is compiled and installed, keep only newest 4
            sed -i '/stamp_installed\:/,/stamp_dircleaned\:/ s:^$:\tfind \$(BUILD_DIR) -mindepth 1 -maxdepth 1 -type d -printf "%T\@\\t%p\\n" | sort -g | head -n -4 | cut -f 2- | xargs -d "\\n" -I\{\} -n1 -r -- find \{\} -type f -not \\\( -iname ".stamp*" -or -iname ".br*" -or -iname ".files*" -or -iname ".applied*" -or -iname "Makefile*" -or -iname "*cmake*" -or -ipath "*conf*" \\\) -delete \n\tdf -BG --output=avail ./ \n:' buildroot/package/pkg-generic.mk
              
            # After each downloaded package is extracted, delete older and keep latest 3
            sed -i 's:(TAR_OPTIONS) -:(TAR_OPTIONS) - \&\& find \$\$(DL_DIR) -mindepth 1 -maxdepth 1 -type d -printf "%T\@\\t%p\\n" | sort -g | head -n -3 | cut -f 2- | xargs -r rm -rfv :' buildroot/package/pkg-generic.mk
            
            # Disable CCACHE and BR2_PER_PACKAGE_DIRECTORIES
            sed -i "/BR2_CCACHE/d" configs/reglinux-board.common
            sed -i "/BR2_PER_PACKAGE_DIRECTORIES/d" configs/* Makefile
            
            # Set secrets
            eval "$(ssh-agent -s)"
            ssh-add - <<< '${{ secrets.REG_ES_SSH_KEY }}'
            sed -i 's|https.*|https://git@github.com/REG-Linux/REG-ES|' package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
            sed -i '/REGLINUX_EMULATIONSTATION_TOKEN/d' package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
            # The '&' in keys is messing with sed command, need to make escape it
            keystring='${{ secrets.SCREENSCRAPER_DEV_LOGIN }}'
            sed -i "s|\"-DSCREENSCRAPER_DEV_LOGIN=\(.*\)\"$|\"-DSCREENSCRAPER_DEV_LOGIN=${keystring//&/\\\&}\"|" package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
            keystring='${{ secrets.GAMESDB_APIKEY }}'
            sed -i "s|\"-DGAMESDB_APIKEY=\(.*\)\"$|\"-DGAMESDB_APIKEY=${keystring//&/\\\&}\"|" package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
            keystring='${{ secrets.CHEEVOS_DEV_LOGIN }}'
            sed -i "s|\"-DCHEEVOS_DEV_LOGIN=\(.*\)\"$|\"-DCHEEVOS_DEV_LOGIN=${keystring//&/\\\&}\"|" package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
            keystring='${{ secrets.HFS_DEV_LOGIN }}'
            sed -i "s|\"-DHFS_DEV_LOGIN=\(.*\)\"$|\"-DHFS_DEV_LOGIN=${keystring//&/\\\&}\"|" package/emulationstation/reglinux-emulationstation/reglinux-emulationstation.mk
          fi

      - name: Restore cache
        id: restore_cache
        if: ${{ steps.prepare_step.outputs.docompile }}
        uses: actions/cache/restore@v4
        with:
          path: REG-LINUX/buildroot/output
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ steps.prepare_step.outputs.regesversion }}

      - name: Compile REG-ES for ${{ matrix.platform }}
        id: compile_step
        if: ${{ steps.prepare_step.outputs.docompile }}
        shell: bash
        run: |
          mkdir -p REG-LINUX/buildroot/output/build
          cd REG-LINUX
          # Delete last package build sub folder to force recompile
          [ -n "${{ github.event.inputs.packagename }}" ] && rm -rf "${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build/${{ github.event.inputs.packagename }}"
          find "${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/build" -mindepth 1 -maxdepth 1 -type d ! -exec test -e "{}/.stamp_installed" \; -exec rm -rf "{}" \; || true
          
          # Build
          ${GITHUB_WORKSPACE}/REG-LINUX/configs/createDefconfig.sh ${GITHUB_WORKSPACE}/REG-LINUX/configs/reglinux-${{ matrix.platform }}
          CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-${{ matrix.platform }}_defconfig
          CCACHE_DISABLE=1 make BR2_EXTERNAL=${GITHUB_WORKSPACE}/REG-LINUX -C ${GITHUB_WORKSPACE}/REG-LINUX/buildroot reglinux-emulationstation
          
          
          # DEBUG
          find / -type f -ipath '*emulationstation*' -or -iname 'launchconfig' -or -iname '04-sway.sh' -print 2> /dev/null
          
          
          # Create package
          cd ${GITHUB_WORKSPACE}/REG-LINUX/buildroot/output/target || exit 1
          tar czf  "${GITHUB_WORKSPACE}/reglinux-emulationstation-${regesversion}-${{ matrix.platform }}.tar.gz" etc/init.d/S31emulationstation etc/profile.d/04-sway.sh etc/sway/launchconfig usr/bin/batocera-preupdate-gamelists-hook usr/bin/emulationstation-standalone usr/share/emulationstation usr/share/reglinux/datainit/system/configs/emulationstation
          echo "dorelease=${{ true }}" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        id: upload_artifacts
        if: ${{ steps.compile_step.outputs.dorelease }}
        uses: actions/upload-artifact@v4
        with:
          name: reglinux-mame-${{ steps.prepare_step.outputs.regesversion }}-${{ matrix.platform }}
          path: reglinux-mame-${{ steps.prepare_step.outputs.regesversion }}-${{ matrix.platform }}.tar.gz

      - name: Save cache
        id: save_cache
        if: ${{ steps.compile_step.outcome  == 'failure' }}
        uses: actions/cache/save@v4
        with:
          path: REG-LINUX/buildroot/output
          key: ${{ matrix.os }}-${{ matrix.platform }}-${{ steps.prepare_step.outputs.regesversion }}-${{ github.run_id }}

  create_release:
    name: Create release
    runs-on: ubuntu-24.04-arm
    needs: build
    if: ${{ needs.build.outputs.dorelease }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./
          merge-multiple: true
      - name: Create release
        uses: softprops/action-gh-release@master
        with:
          files: reglinux-emulationstation-${{ steps.prepare_step.outputs.regesversion }}-*
          tag_name: ${{ steps.prepare_step.outputs.regesversion }}
          prerelease: false
          generate_release_notes: true
          name: REG-ES binaries ${{ steps.prepare_step.outputs.regesversion }}
